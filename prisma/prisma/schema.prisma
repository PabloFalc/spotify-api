generator client {
  provider      = "prisma-client-js"
  output        = "./prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String @id @default(uuid())
  name     String @db.VarChar(50)
  email    String @db.VarChar(254)
  password String @db.VarChar(254)
  img      String @db.VarChar(254)

  followedBy Follow[] @relation("FollowedBy") // seguindo por
  following  Follow[] @relation("Following") // seguindo
  likedSongs Like[]   @relation("LikedSongs")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Users_TB")
}

// Tabela intermediária para conter a relação many to many
model Follow {
  follower   User   @relation("Following", fields: [followerId], references: [id])
  followerId String

  followed   User   @relation("FollowedBy", fields: [followedId], references: [id])
  followedId String

  createdAt DateTime @default(now())

  @@id([followerId, followedId])
  @@map("Follows_TB")
}

model Song {
  id      String @id @default(uuid())
  title   String @db.VarChar(150)
  imgUrl  String @db.VarChar(254)
  songUrl String @db.VarChar(254)
  likes   Like[] @relation("Likes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  userId String
  user   User   @relation("LikedSongs", fields: [userId], references: [id])

  songId String
  song   Song   @relation("Likes", fields: [songId], references: [id])

  @@id([userId, songId])
}
